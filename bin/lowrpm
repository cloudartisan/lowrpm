#!/usr/bin/env ruby 

# == Synopsis 
#   This is a sample description of the application.
#   Blah blah blah.
#
# == Examples
#   This command does blah blah blah.
#     ruby_cl_skeleton foo.txt
#
#   Other examples:
#     ruby_cl_skeleton -q bar.doc
#     ruby_cl_skeleton --verbose foo.html
#
# == Usage 
#   ruby_cl_skeleton [options] source_file
#
#   For help use: ruby_cl_skeleton -h
#
# == Options
#   -h, --help          Displays help message
#   -V, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -v, --verbose       Verbose output
#   TO DO - add additional options
#
# == Author
#   YourName
#
# == Copyright
#   Copyright (c) 2007 YourName. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php


# TO DO - replace all ruby_cl_skeleton with your app name
# TO DO - replace all YourName with your actual name
# TO DO - update Synopsis, Examples, etc
# TO DO - change license if necessary


require 'optparse'
require 'ostruct'
require 'date'
require '../lib/lowrpm.rb'


class LowRpmApp

  attr_reader :options

  def initialize(arguments, input)
    @arguments = arguments
    @input = input
    
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
    if parsed_options? && arguments_valid? 
			show_options if @options.verbose
      process_arguments            
      process_input
    else
			# FIXME
    end
  end
  
  protected
    def parsed_options?
      @opts = OptionParser.new 
      @opts.on('-h', '--help')       { puts @opts ; exit 0 }
      @opts.on('-v', '--verbose')    { @options.verbose = true }  
      @opts.on('-V', '--version')    { version ; exit 0 }
      @opts.on('-q', '--quiet')      { @options.quiet = true }

      @opts.parse!(@arguments) rescue return false

      process_options
      true      
    end

    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def show_options
      puts "Options:"
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    def arguments_valid?
      true if @arguments.length == 2 
    end
    
    def process_arguments
			@license_key = ARGV[0]
			@application_name = ARGV[1]
    end
    
    def version
      puts "#{File.basename(__FILE__)} version #{LowRpm::VERSION}"
    end
    
    def process_input
			#lowrpm = LowRpm.new(@license_key, @application_name)
      input = @input.read      
      @input.each do |line| 
				datetime = DateTime.parse(input)
				puts datetime
      end
    end
end


lowrpm_app = LowRpmApp.new(ARGV, STDIN)
lowrpm_app.run
